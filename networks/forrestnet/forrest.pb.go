// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: forrest.proto

package forrestnet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Beacon is a chain to the root, signed at every link.
// Beacons are periodically broadcast to all peers by the root,
// and are amended and rebroadcast by non-root nodes.
type Beacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Optimum   []byte  `protobuf:"bytes,4,opt,name=optimum,proto3" json:"optimum,omitempty"`
	RootKey   []byte  `protobuf:"bytes,1,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	Timestamp []byte  `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Chain     []*Link `protobuf:"bytes,3,rep,name=chain,proto3" json:"chain,omitempty"`
}

func (x *Beacon) Reset() {
	*x = Beacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacon) ProtoMessage() {}

func (x *Beacon) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacon.ProtoReflect.Descriptor instead.
func (*Beacon) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{0}
}

func (x *Beacon) GetOptimum() []byte {
	if x != nil {
		return x.Optimum
	}
	return nil
}

func (x *Beacon) GetRootKey() []byte {
	if x != nil {
		return x.RootKey
	}
	return nil
}

func (x *Beacon) GetTimestamp() []byte {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Beacon) GetChain() []*Link {
	if x != nil {
		return x.Chain
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Branch    uint32 `protobuf:"varint,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Sig       []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Link) GetBranch() uint32 {
	if x != nil {
		return x.Branch
	}
	return 0
}

func (x *Link) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// LocationClaim
type LocationClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacon *Beacon `protobuf:"bytes,1,opt,name=beacon,proto3" json:"beacon,omitempty"`
	Sig    []byte  `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *LocationClaim) Reset() {
	*x = LocationClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationClaim) ProtoMessage() {}

func (x *LocationClaim) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationClaim.ProtoReflect.Descriptor instead.
func (*LocationClaim) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{2}
}

func (x *LocationClaim) GetBeacon() *Beacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *LocationClaim) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type RoutingTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    []byte   `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Src    []byte   `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	DstLoc *TreeLoc `protobuf:"bytes,3,opt,name=dst_loc,json=dstLoc,proto3" json:"dst_loc,omitempty"`
	SrcLoc *TreeLoc `protobuf:"bytes,4,opt,name=src_loc,json=srcLoc,proto3" json:"src_loc,omitempty"`
}

func (x *RoutingTag) Reset() {
	*x = RoutingTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingTag) ProtoMessage() {}

func (x *RoutingTag) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingTag.ProtoReflect.Descriptor instead.
func (*RoutingTag) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{3}
}

func (x *RoutingTag) GetDst() []byte {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *RoutingTag) GetSrc() []byte {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *RoutingTag) GetDstLoc() *TreeLoc {
	if x != nil {
		return x.DstLoc
	}
	return nil
}

func (x *RoutingTag) GetSrcLoc() *TreeLoc {
	if x != nil {
		return x.SrcLoc
	}
	return nil
}

type TreeLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root []byte   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Path []uint32 `protobuf:"varint,2,rep,packed,name=path,proto3" json:"path,omitempty"`
}

func (x *TreeLoc) Reset() {
	*x = TreeLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeLoc) ProtoMessage() {}

func (x *TreeLoc) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeLoc.ProtoReflect.Descriptor instead.
func (*TreeLoc) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{4}
}

func (x *TreeLoc) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TreeLoc) GetPath() []uint32 {
	if x != nil {
		return x.Path
	}
	return nil
}

type FindNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Nbits  uint32 `protobuf:"varint,2,opt,name=nbits,proto3" json:"nbits,omitempty"`
}

func (x *FindNodeReq) Reset() {
	*x = FindNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeReq) ProtoMessage() {}

func (x *FindNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeReq.ProtoReflect.Descriptor instead.
func (*FindNodeReq) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{5}
}

func (x *FindNodeReq) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *FindNodeReq) GetNbits() uint32 {
	if x != nil {
		return x.Nbits
	}
	return 0
}

type FindNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   []byte           `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Claims []*LocationClaim `protobuf:"bytes,2,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *FindNodeRes) Reset() {
	*x = FindNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeRes) ProtoMessage() {}

func (x *FindNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeRes.ProtoReflect.Descriptor instead.
func (*FindNodeRes) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{6}
}

func (x *FindNodeRes) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *FindNodeRes) GetClaims() []*LocationClaim {
	if x != nil {
		return x.Claims
	}
	return nil
}

type PutNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   []byte           `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Claims []*LocationClaim `protobuf:"bytes,2,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *PutNodeReq) Reset() {
	*x = PutNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forrest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeReq) ProtoMessage() {}

func (x *PutNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_forrest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeReq.ProtoReflect.Descriptor instead.
func (*PutNodeReq) Descriptor() ([]byte, []int) {
	return file_forrest_proto_rawDescGZIP(), []int{7}
}

func (x *PutNodeReq) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *PutNodeReq) GetClaims() []*LocationClaim {
	if x != nil {
		return x.Claims
	}
	return nil
}

var File_forrest_proto protoreflect.FileDescriptor

var file_forrest_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x74,
	0x6e, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x22, 0x4f, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73,
	0x69, 0x67, 0x22, 0x55, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52,
	0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x07,
	0x64, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x6f, 0x63, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x6f, 0x63,
	0x52, 0x06, 0x73, 0x72, 0x63, 0x4c, 0x6f, 0x63, 0x22, 0x31, 0x0a, 0x07, 0x54, 0x72, 0x65, 0x65,
	0x4c, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3b, 0x0a, 0x0b, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6e, 0x62, 0x69, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e,
	0x65, 0x74, 0x32, 0x35, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x32,
	0x35, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35, 0x36, 0x2f, 0x69, 0x6e, 0x65, 0x74, 0x32, 0x35,
	0x36, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x66, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x74, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_forrest_proto_rawDescOnce sync.Once
	file_forrest_proto_rawDescData = file_forrest_proto_rawDesc
)

func file_forrest_proto_rawDescGZIP() []byte {
	file_forrest_proto_rawDescOnce.Do(func() {
		file_forrest_proto_rawDescData = protoimpl.X.CompressGZIP(file_forrest_proto_rawDescData)
	})
	return file_forrest_proto_rawDescData
}

var file_forrest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_forrest_proto_goTypes = []interface{}{
	(*Beacon)(nil),        // 0: inet256.forrestnet.Beacon
	(*Link)(nil),          // 1: inet256.forrestnet.Link
	(*LocationClaim)(nil), // 2: inet256.forrestnet.LocationClaim
	(*RoutingTag)(nil),    // 3: inet256.forrestnet.RoutingTag
	(*TreeLoc)(nil),       // 4: inet256.forrestnet.TreeLoc
	(*FindNodeReq)(nil),   // 5: inet256.forrestnet.FindNodeReq
	(*FindNodeRes)(nil),   // 6: inet256.forrestnet.FindNodeRes
	(*PutNodeReq)(nil),    // 7: inet256.forrestnet.PutNodeReq
}
var file_forrest_proto_depIdxs = []int32{
	1, // 0: inet256.forrestnet.Beacon.chain:type_name -> inet256.forrestnet.Link
	0, // 1: inet256.forrestnet.LocationClaim.beacon:type_name -> inet256.forrestnet.Beacon
	4, // 2: inet256.forrestnet.RoutingTag.dst_loc:type_name -> inet256.forrestnet.TreeLoc
	4, // 3: inet256.forrestnet.RoutingTag.src_loc:type_name -> inet256.forrestnet.TreeLoc
	2, // 4: inet256.forrestnet.FindNodeRes.claims:type_name -> inet256.forrestnet.LocationClaim
	2, // 5: inet256.forrestnet.PutNodeReq.claims:type_name -> inet256.forrestnet.LocationClaim
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_forrest_proto_init() }
func file_forrest_proto_init() {
	if File_forrest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_forrest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forrest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_forrest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_forrest_proto_goTypes,
		DependencyIndexes: file_forrest_proto_depIdxs,
		MessageInfos:      file_forrest_proto_msgTypes,
	}.Build()
	File_forrest_proto = out.File
	file_forrest_proto_rawDesc = nil
	file_forrest_proto_goTypes = nil
	file_forrest_proto_depIdxs = nil
}
