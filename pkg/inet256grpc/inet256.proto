syntax = "proto3";

package inet256;

option go_package = "github.com/inet256/inet256/pkg/inet256grpc";

import "google/protobuf/empty.proto";

message GenerateKeyRes {
    bytes private_key = 1;
}

message LookupReq {
    bytes target_addr = 1;
}

message LookupRes {
    bytes addr = 1;
    bytes public_key = 2;
}

message ConnectMsg {
    ConnectInit ConnectInit = 1;
    Datagram datagram = 2;
}

message ConnectInit {
    bytes private_key = 1;
}

message Datagram {
    bytes src = 1;
    bytes dst = 2;
    bytes payload = 3;
}

message MTUReq {
    bytes target = 1;
}

message MTURes {
    int64 mtu = 1;
}

message PeerStatus {
    bytes addr = 1;
    map<string, int64> last_seen = 2;
}

message Status {
    bytes local_addr = 1;
    repeated string transport_addrs = 2;
    repeated PeerStatus peer_status = 3;
    repeated bytes running_nodes = 4;
}

service INET256 {
    rpc GenerateKey(google.protobuf.Empty) returns (GenerateKeyRes) {}
    rpc Lookup(LookupReq) returns (LookupRes) {}
    rpc MTU(MTUReq) returns (MTURes) {}

    // Connect starts a session for sending and receiving messages
    // The first message must contain a private key. The corresponding public key will
    // be used to derive an address
    rpc Connect(stream ConnectMsg) returns (stream ConnectMsg) {}
}

service Admin {
    rpc GetStatus(google.protobuf.Empty) returns (Status) {}
}
