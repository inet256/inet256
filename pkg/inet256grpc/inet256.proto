syntax = "proto3";

package inet256;

option go_package = "github.com/inet256/inet256/pkg/inet256grpc";

import "google/protobuf/empty.proto";

message GenerateKeyRes {
    bytes private_key = 1;
}

message FindAddrReq {
    bytes private_key = 1;
    bytes prefix = 2;
    uint32 nbits = 3;
}

message FindAddrRes {
    bytes addr = 1;
    bytes public_key = 2;
}

message LookupPublicKeyReq {
    bytes private_key = 1;
    bytes target = 2;
}

message LookupPublicKeyRes {
    bytes public_key = 1;
}

message ConnectMsg {
    ConnectInit init = 1;
    bytes established = 2;
    Datagram datagram = 3;
}

message ConnectInit {
    bytes private_key = 1;
}

message Datagram {
    bytes src = 1;
    bytes dst = 2;
    bytes payload = 3;
}

message MTUReq {
    bytes private_key = 1;
    bytes target = 2;
}

message MTURes {
    bytes private_key = 1;
    int64 mtu = 2;
}

message PeerStatus {
    bytes addr = 1;
    map<string, int64> last_seen = 2;
}

message DropReq {
    bytes private_key = 1;
}

message DropRes {}

service INET256 {
    rpc GenerateKey(google.protobuf.Empty) returns (GenerateKeyRes) {}
    rpc LookupPublicKey(LookupPublicKeyReq) returns (LookupPublicKeyRes) {}
    rpc FindAddr(FindAddrReq) returns (FindAddrRes) {}
    rpc MTU(MTUReq) returns (MTURes) {}

    // Connect starts a session for sending and receiving messages
    // The first message must contain a private key. The corresponding public key will
    // be used to derive an address
    rpc Connect(stream ConnectMsg) returns (stream ConnectMsg) {}
    // Drop disconnects all connected sessions for a given private key.
    rpc Drop(DropReq) returns (DropRes) {}
}
