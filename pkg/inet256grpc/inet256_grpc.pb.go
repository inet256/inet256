// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inet256grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// INET256Client is the client API for INET256 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type INET256Client interface {
	GenerateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateKeyRes, error)
	LookupSelf(ctx context.Context, in *LookupSelfReq, opts ...grpc.CallOption) (*PeerInfo, error)
	Lookup(ctx context.Context, in *LookupReq, opts ...grpc.CallOption) (*PeerInfo, error)
	// Connect starts a session for sending and receiving messages
	// The first message must contain a private key. The corresponding public key will
	// be used to derive an address
	Connect(ctx context.Context, opts ...grpc.CallOption) (INET256_ConnectClient, error)
	MTU(ctx context.Context, in *MTUReq, opts ...grpc.CallOption) (*MTURes, error)
}

type iNET256Client struct {
	cc grpc.ClientConnInterface
}

func NewINET256Client(cc grpc.ClientConnInterface) INET256Client {
	return &iNET256Client{cc}
}

func (c *iNET256Client) GenerateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateKeyRes, error) {
	out := new(GenerateKeyRes)
	err := c.cc.Invoke(ctx, "/inet256.INET256/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNET256Client) LookupSelf(ctx context.Context, in *LookupSelfReq, opts ...grpc.CallOption) (*PeerInfo, error) {
	out := new(PeerInfo)
	err := c.cc.Invoke(ctx, "/inet256.INET256/LookupSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNET256Client) Lookup(ctx context.Context, in *LookupReq, opts ...grpc.CallOption) (*PeerInfo, error) {
	out := new(PeerInfo)
	err := c.cc.Invoke(ctx, "/inet256.INET256/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNET256Client) Connect(ctx context.Context, opts ...grpc.CallOption) (INET256_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INET256_serviceDesc.Streams[0], "/inet256.INET256/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNET256ConnectClient{stream}
	return x, nil
}

type INET256_ConnectClient interface {
	Send(*ConnectMsg) error
	Recv() (*ConnectMsg, error)
	grpc.ClientStream
}

type iNET256ConnectClient struct {
	grpc.ClientStream
}

func (x *iNET256ConnectClient) Send(m *ConnectMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNET256ConnectClient) Recv() (*ConnectMsg, error) {
	m := new(ConnectMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNET256Client) MTU(ctx context.Context, in *MTUReq, opts ...grpc.CallOption) (*MTURes, error) {
	out := new(MTURes)
	err := c.cc.Invoke(ctx, "/inet256.INET256/MTU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// INET256Server is the server API for INET256 service.
// All implementations must embed UnimplementedINET256Server
// for forward compatibility
type INET256Server interface {
	GenerateKey(context.Context, *emptypb.Empty) (*GenerateKeyRes, error)
	LookupSelf(context.Context, *LookupSelfReq) (*PeerInfo, error)
	Lookup(context.Context, *LookupReq) (*PeerInfo, error)
	// Connect starts a session for sending and receiving messages
	// The first message must contain a private key. The corresponding public key will
	// be used to derive an address
	Connect(INET256_ConnectServer) error
	MTU(context.Context, *MTUReq) (*MTURes, error)
	mustEmbedUnimplementedINET256Server()
}

// UnimplementedINET256Server must be embedded to have forward compatible implementations.
type UnimplementedINET256Server struct {
}

func (*UnimplementedINET256Server) GenerateKey(context.Context, *emptypb.Empty) (*GenerateKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (*UnimplementedINET256Server) LookupSelf(context.Context, *LookupSelfReq) (*PeerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSelf not implemented")
}
func (*UnimplementedINET256Server) Lookup(context.Context, *LookupReq) (*PeerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedINET256Server) Connect(INET256_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedINET256Server) MTU(context.Context, *MTUReq) (*MTURes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MTU not implemented")
}
func (*UnimplementedINET256Server) mustEmbedUnimplementedINET256Server() {}

func RegisterINET256Server(s *grpc.Server, srv INET256Server) {
	s.RegisterService(&_INET256_serviceDesc, srv)
}

func _INET256_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INET256Server).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inet256.INET256/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INET256Server).GenerateKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _INET256_LookupSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INET256Server).LookupSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inet256.INET256/LookupSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INET256Server).LookupSelf(ctx, req.(*LookupSelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INET256_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INET256Server).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inet256.INET256/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INET256Server).Lookup(ctx, req.(*LookupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INET256_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INET256Server).Connect(&iNET256ConnectServer{stream})
}

type INET256_ConnectServer interface {
	Send(*ConnectMsg) error
	Recv() (*ConnectMsg, error)
	grpc.ServerStream
}

type iNET256ConnectServer struct {
	grpc.ServerStream
}

func (x *iNET256ConnectServer) Send(m *ConnectMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNET256ConnectServer) Recv() (*ConnectMsg, error) {
	m := new(ConnectMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INET256_MTU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INET256Server).MTU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inet256.INET256/MTU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INET256Server).MTU(ctx, req.(*MTUReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _INET256_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inet256.INET256",
	HandlerType: (*INET256Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _INET256_GenerateKey_Handler,
		},
		{
			MethodName: "LookupSelf",
			Handler:    _INET256_LookupSelf_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _INET256_Lookup_Handler,
		},
		{
			MethodName: "MTU",
			Handler:    _INET256_MTU_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _INET256_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "inet256.proto",
}
